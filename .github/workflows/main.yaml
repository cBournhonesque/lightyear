name: Main
on:
  push:
    branches:
      - main
    paths-ignore:
      - ".gitignore"
      - ".github/dependabot.yml"
      - "**.md"
  pull_request:
    paths-ignore:
      - ".gitignore"
      - ".github/dependabot.yml"
      - "**.md"
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: --deny warnings -C debuginfo=line-tables-only
  RUSTDOCFLAGS: --deny warnings
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-all-crates: true
          shared-key: lints
      - name: Format
        run: |
          cargo fmt --all --check
      # we cannot `cargo clippy --workspace` because it would activate all features found in any crate
      # of the workspace (including avian2d, avian3d, test_utils), which causes issues
      # TODO: put the Instant in a common crate
      # TODO: put create lightyear_avian2d and lightyear_avian3d crates
      - name: Clippy lightyear
        run: |-
          crates=(
            lightyear
            lightyear_aeronet
            lightyear_avian
            lightyear_connection
            lightyear_core
            lightyear_crossbeam
            lightyear_frame_interpolation
            lightyear_inputs
            # lightyear_inputs_leafwing  # needs client/server features
            # lightyear_inputs_native  # needs client/server features
            lightyear_interpolation
            lightyear_link
            lightyear_macros
            lightyear_messages
            lightyear_netcode
            lightyear_prediction
            lightyear_replication
            lightyear_serde
            lightyear_steam
            lightyear_sync
            lightyear_transport
            lightyear_udp
            lightyear_utils
            lightyear_webtransport
          )
          for crate in "${crates[@]}"; do
            cargo clippy -p $crate --no-deps  -- -D warnings -A clippy::wrong_self_convention -A clippy::needless_lifetimes
          done

  docs:
    name: Doc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-all-crates: true
          shared-key: lints
      - name: Rustdoc
        env:
          # needs to be in sync with [package.metadata.docs.rs]
          RUSTFLAGS: --cfg docsrs_dep
          RUSTDOCFLAGS: --cfg=docsrs --generate-link-to-definition
        # TODO: same, cannot use workspace right now
        run: cargo doc -p lightyear --document-private-items --no-deps -D warnings

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config libusb-1.0-0-dev libftdi1-dev libudev-dev;

      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache crates
        uses: Swatinem/rust-cache@v2

      - name: Install LLVM tools
        run: rustup component add llvm-tools-preview

      - name: Install Tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Test
        run: cargo tarpaulin -p lightyear_tests --engine llvm --out lcov

      - name: Test doc
        run: cargo test --workspace --doc

      - name: Upload code coverage results
        if: github.actor != 'dependabot[bot]'
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: lcov.info

  codecov:
    name: Upload to Codecov
    if: github.actor != 'dependabot[bot]'
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Download code coverage results
        uses: actions/download-artifact@v4
        with:
          name: code-coverage-report

      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}