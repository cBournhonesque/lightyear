<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="2022" onload="init(evt)" viewBox="0 0 1200 2022" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="2022" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="2005.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="2005.00"> </text><svg id="frames" x="10" width="1180" total_samples="11"><g><title>6186643456 (1 samples, 9.09%)</title><rect x="0.0000%" y="1957" width="9.0909%" height="15" fill="rgb(220,212,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1967.50">6186643456</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (1 samples, 9.09%)</title><rect x="0.0000%" y="1941" width="9.0909%" height="15" fill="rgb(213,30,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1951.50">std::sys::pal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="0.0000%" y="1925" width="9.0909%" height="15" fill="rgb(237,205,8)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1935.50">&lt;alloc::boxed..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="0.0000%" y="1909" width="9.0909%" height="15" fill="rgb(246,135,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1919.50">&lt;alloc::boxed..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1893" width="9.0909%" height="15" fill="rgb(236,64,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1903.50">core::ops::fu..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1877" width="9.0909%" height="15" fill="rgb(249,129,27)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1887.50">std::thread::..</text></g><g><title>std::panic::catch_unwind (1 samples, 9.09%)</title><rect x="0.0000%" y="1861" width="9.0909%" height="15" fill="rgb(250,34,11)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1871.50">std::panic::c..</text></g><g><title>std::panicking::try (1 samples, 9.09%)</title><rect x="0.0000%" y="1845" width="9.0909%" height="15" fill="rgb(217,145,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1855.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1 samples, 9.09%)</title><rect x="0.0000%" y="1829" width="9.0909%" height="15" fill="rgb(237,57,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1839.50">std::panickin..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="0.0000%" y="1813" width="9.0909%" height="15" fill="rgb(240,113,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1823.50">&lt;core::panic:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1797" width="9.0909%" height="15" fill="rgb(205,72,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1807.50">std::thread::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 9.09%)</title><rect x="0.0000%" y="1781" width="9.0909%" height="15" fill="rgb(223,2,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1791.50">std::sys_comm..</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1765" width="9.0909%" height="15" fill="rgb(224,57,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1775.50">bevy_tasks::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 9.09%)</title><rect x="0.0000%" y="1749" width="9.0909%" height="15" fill="rgb(228,102,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1759.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 9.09%)</title><rect x="0.0000%" y="1733" width="9.0909%" height="15" fill="rgb(250,101,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1743.50">std::thread::..</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}}::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1717" width="9.0909%" height="15" fill="rgb(232,191,18)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1727.50">bevy_tasks::t..</text></g><g><title>std::panic::catch_unwind (1 samples, 9.09%)</title><rect x="0.0000%" y="1701" width="9.0909%" height="15" fill="rgb(235,122,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1711.50">std::panic::c..</text></g><g><title>std::panicking::try (1 samples, 9.09%)</title><rect x="0.0000%" y="1685" width="9.0909%" height="15" fill="rgb(212,106,50)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1695.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1 samples, 9.09%)</title><rect x="0.0000%" y="1669" width="9.0909%" height="15" fill="rgb(253,42,20)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1679.50">std::panickin..</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}}::{{closure}}::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1653" width="9.0909%" height="15" fill="rgb(225,38,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1663.50">bevy_tasks::t..</text></g><g><title>futures_lite::future::block_on (1 samples, 9.09%)</title><rect x="0.0000%" y="1637" width="9.0909%" height="15" fill="rgb(206,175,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1647.50">futures_lite:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 9.09%)</title><rect x="0.0000%" y="1621" width="9.0909%" height="15" fill="rgb(211,105,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1631.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 9.09%)</title><rect x="0.0000%" y="1605" width="9.0909%" height="15" fill="rgb(210,67,3)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1615.50">std::thread::..</text></g><g><title>futures_lite::future::block_on::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1589" width="9.0909%" height="15" fill="rgb(252,131,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1599.50">futures_lite:..</text></g><g><title>async_executor::Executor::run::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1573" width="9.0909%" height="15" fill="rgb(215,135,23)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1583.50">async_executo..</text></g><g><title>async_executor::State::run::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1557" width="9.0909%" height="15" fill="rgb(207,222,3)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1567.50">async_executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="0.0000%" y="1541" width="9.0909%" height="15" fill="rgb(216,215,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1551.50">&lt;futures_lite..</text></g><g><title>async_executor::State::run::{{closure}}::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1525" width="9.0909%" height="15" fill="rgb(238,2,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1535.50">async_executo..</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (1 samples, 9.09%)</title><rect x="0.0000%" y="1509" width="9.0909%" height="15" fill="rgb(238,26,27)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1519.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (1 samples, 9.09%)</title><rect x="0.0000%" y="1493" width="9.0909%" height="15" fill="rgb(247,214,9)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1503.50">async_task::r..</text></g><g><title>async_executor::Executor::spawn_inner::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1477" width="9.0909%" height="15" fill="rgb(239,47,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1487.50">async_executo..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="0.0000%" y="1461" width="9.0909%" height="15" fill="rgb(205,200,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1471.50">&lt;futures_lite..</text></g><g><title>std::panic::catch_unwind (1 samples, 9.09%)</title><rect x="0.0000%" y="1445" width="9.0909%" height="15" fill="rgb(211,155,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1455.50">std::panic::c..</text></g><g><title>std::panicking::try (1 samples, 9.09%)</title><rect x="0.0000%" y="1429" width="9.0909%" height="15" fill="rgb(220,224,44)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1439.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1 samples, 9.09%)</title><rect x="0.0000%" y="1413" width="9.0909%" height="15" fill="rgb(225,46,15)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1423.50">std::panickin..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="0.0000%" y="1397" width="9.0909%" height="15" fill="rgb(207,116,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1407.50">&lt;core::panic:..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1381" width="9.0909%" height="15" fill="rgb(244,206,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1391.50">&lt;futures_lite..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="0.0000%" y="1365" width="9.0909%" height="15" fill="rgb(224,33,52)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1375.50">&lt;core::panic:..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_system_task::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1349" width="9.0909%" height="15" fill="rgb(240,192,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1359.50">bevy_ecs::sch..</text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1 samples, 9.09%)</title><rect x="0.0000%" y="1333" width="9.0909%" height="15" fill="rgb(240,42,4)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1343.50">async_channel..</text></g><g><title>event_listener::Event::notify_additional (1 samples, 9.09%)</title><rect x="0.0000%" y="1317" width="9.0909%" height="15" fill="rgb(243,38,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1327.50">event_listene..</text></g><g><title>event_listener::Event&lt;T&gt;::notify (1 samples, 9.09%)</title><rect x="0.0000%" y="1301" width="9.0909%" height="15" fill="rgb(210,64,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1311.50">event_listene..</text></g><g><title>event_listener::sys::&lt;impl event_listener::Inner&lt;T&gt;&gt;::notify (1 samples, 9.09%)</title><rect x="0.0000%" y="1285" width="9.0909%" height="15" fill="rgb(243,19,16)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1295.50">event_listene..</text></g><g><title>event_listener::sys::Inner&lt;T&gt;::notify (1 samples, 9.09%)</title><rect x="0.0000%" y="1269" width="9.0909%" height="15" fill="rgb(225,142,31)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50">event_listene..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::wake (1 samples, 9.09%)</title><rect x="0.0000%" y="1253" width="9.0909%" height="15" fill="rgb(225,171,31)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1263.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::wake_by_ref (1 samples, 9.09%)</title><rect x="0.0000%" y="1237" width="9.0909%" height="15" fill="rgb(237,95,16)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50">async_task::r..</text></g><g><title>&lt;F as async_task::runnable::Schedule&lt;M&gt;&gt;::schedule (1 samples, 9.09%)</title><rect x="0.0000%" y="1221" width="9.0909%" height="15" fill="rgb(215,136,10)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50">&lt;F as async_t..</text></g><g><title>async_executor::Executor::schedule::{{closure}} (1 samples, 9.09%)</title><rect x="0.0000%" y="1205" width="9.0909%" height="15" fill="rgb(242,145,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50">async_executo..</text></g><g><title>alloc::task::raw_waker::wake (1 samples, 9.09%)</title><rect x="0.0000%" y="1189" width="9.0909%" height="15" fill="rgb(244,183,33)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50">alloc::task::..</text></g><g><title>&lt;parking::Inner as alloc::task::Wake&gt;::wake (1 samples, 9.09%)</title><rect x="0.0000%" y="1173" width="9.0909%" height="15" fill="rgb(217,101,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50">&lt;parking::Inn..</text></g><g><title>&lt;Func as bevy_ecs::system::function_system::SystemParamFunction&lt;fn(F0,F1,F2) .&gt; Out&gt;&gt;::run (1 samples, 9.09%)</title><rect x="9.0909%" y="1221" width="9.0909%" height="15" fill="rgb(221,213,15)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1231.50">&lt;Func as bevy..</text></g><g><title>&lt;Func as bevy_ecs::system::function_system::SystemParamFunction&lt;fn(F0,F1,F2) .&gt; Out&gt;&gt;::run::call_inner (1 samples, 9.09%)</title><rect x="9.0909%" y="1205" width="9.0909%" height="15" fill="rgb(235,34,6)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1215.50">&lt;Func as bevy..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 9.09%)</title><rect x="9.0909%" y="1189" width="9.0909%" height="15" fill="rgb(209,222,37)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1199.50">core::ops::fu..</text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 9.09%)</title><rect x="9.0909%" y="1173" width="9.0909%" height="15" fill="rgb(233,146,2)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1183.50">core::ops::fu..</text></g><g><title>lightyear::server::replication::send::handle_replicating_add (1 samples, 9.09%)</title><rect x="9.0909%" y="1157" width="9.0909%" height="15" fill="rgb(220,98,30)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1167.50">lightyear::se..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 9.09%)</title><rect x="9.0909%" y="1141" width="9.0909%" height="15" fill="rgb(226,54,20)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1151.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 9.09%)</title><rect x="9.0909%" y="1125" width="9.0909%" height="15" fill="rgb(239,161,17)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1135.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 9.09%)</title><rect x="9.0909%" y="1109" width="9.0909%" height="15" fill="rgb(254,68,16)" fg:x="1" fg:w="1"/><text x="9.3409%" y="1119.50">hashbrown::ra..</text></g><g><title>6188789760 (2 samples, 18.18%)</title><rect x="9.0909%" y="1957" width="18.1818%" height="15" fill="rgb(236,35,19)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1967.50">6188789760</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (2 samples, 18.18%)</title><rect x="9.0909%" y="1941" width="18.1818%" height="15" fill="rgb(245,41,54)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1951.50">std::sys::pal::unix::thread:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1925" width="18.1818%" height="15" fill="rgb(212,106,10)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1935.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1909" width="18.1818%" height="15" fill="rgb(205,80,16)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1919.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1893" width="18.1818%" height="15" fill="rgb(209,166,2)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1903.50">core::ops::function::FnOnce:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1877" width="18.1818%" height="15" fill="rgb(249,76,13)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1887.50">std::thread::Builder::spawn_..</text></g><g><title>std::panic::catch_unwind (2 samples, 18.18%)</title><rect x="9.0909%" y="1861" width="18.1818%" height="15" fill="rgb(205,2,1)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1871.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2 samples, 18.18%)</title><rect x="9.0909%" y="1845" width="18.1818%" height="15" fill="rgb(210,204,44)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1855.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2 samples, 18.18%)</title><rect x="9.0909%" y="1829" width="18.1818%" height="15" fill="rgb(209,121,47)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1839.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1813" width="18.1818%" height="15" fill="rgb(240,28,3)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1823.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1797" width="18.1818%" height="15" fill="rgb(219,172,27)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1807.50">std::thread::Builder::spawn_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 18.18%)</title><rect x="9.0909%" y="1781" width="18.1818%" height="15" fill="rgb(228,199,4)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1791.50">std::sys_common::backtrace::..</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1765" width="18.1818%" height="15" fill="rgb(244,175,49)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1775.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 18.18%)</title><rect x="9.0909%" y="1749" width="18.1818%" height="15" fill="rgb(224,123,47)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1759.50">std::thread::local::LocalKey..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 18.18%)</title><rect x="9.0909%" y="1733" width="18.1818%" height="15" fill="rgb(210,217,38)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1743.50">std::thread::local::LocalKey..</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1717" width="18.1818%" height="15" fill="rgb(219,126,22)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1727.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>std::panic::catch_unwind (2 samples, 18.18%)</title><rect x="9.0909%" y="1701" width="18.1818%" height="15" fill="rgb(214,3,30)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1711.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2 samples, 18.18%)</title><rect x="9.0909%" y="1685" width="18.1818%" height="15" fill="rgb(226,141,9)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1695.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2 samples, 18.18%)</title><rect x="9.0909%" y="1669" width="18.1818%" height="15" fill="rgb(236,205,27)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1679.50">std::panicking::try::do_call</text></g><g><title>bevy_tasks::task_pool::TaskPool::new_internal::{{closure}}::{{closure}}::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1653" width="18.1818%" height="15" fill="rgb(226,84,53)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1663.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>futures_lite::future::block_on (2 samples, 18.18%)</title><rect x="9.0909%" y="1637" width="18.1818%" height="15" fill="rgb(209,69,29)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1647.50">futures_lite::future::block_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 18.18%)</title><rect x="9.0909%" y="1621" width="18.1818%" height="15" fill="rgb(238,31,49)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1631.50">std::thread::local::LocalKey..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 18.18%)</title><rect x="9.0909%" y="1605" width="18.1818%" height="15" fill="rgb(245,2,13)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1615.50">std::thread::local::LocalKey..</text></g><g><title>futures_lite::future::block_on::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1589" width="18.1818%" height="15" fill="rgb(246,101,25)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1599.50">futures_lite::future::block_..</text></g><g><title>async_executor::Executor::run::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1573" width="18.1818%" height="15" fill="rgb(224,166,52)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1583.50">async_executor::Executor::ru..</text></g><g><title>async_executor::State::run::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1557" width="18.1818%" height="15" fill="rgb(219,154,43)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1567.50">async_executor::State::run::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2 samples, 18.18%)</title><rect x="9.0909%" y="1541" width="18.1818%" height="15" fill="rgb(227,115,53)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1551.50">&lt;futures_lite::future::Or&lt;F1..</text></g><g><title>async_executor::State::run::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1525" width="18.1818%" height="15" fill="rgb(219,33,19)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1535.50">async_executor::State::run::..</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (2 samples, 18.18%)</title><rect x="9.0909%" y="1509" width="18.1818%" height="15" fill="rgb(210,107,28)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1519.50">async_task::runnable::Runnab..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (2 samples, 18.18%)</title><rect x="9.0909%" y="1493" width="18.1818%" height="15" fill="rgb(243,118,22)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1503.50">async_task::raw::RawTask&lt;F,T..</text></g><g><title>async_executor::Executor::spawn_inner::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1477" width="18.1818%" height="15" fill="rgb(253,193,39)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1487.50">async_executor::Executor::sp..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 18.18%)</title><rect x="9.0909%" y="1461" width="18.1818%" height="15" fill="rgb(227,128,11)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1471.50">&lt;futures_lite::future::Catch..</text></g><g><title>std::panic::catch_unwind (2 samples, 18.18%)</title><rect x="9.0909%" y="1445" width="18.1818%" height="15" fill="rgb(252,71,27)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1455.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2 samples, 18.18%)</title><rect x="9.0909%" y="1429" width="18.1818%" height="15" fill="rgb(229,118,33)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1439.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2 samples, 18.18%)</title><rect x="9.0909%" y="1413" width="18.1818%" height="15" fill="rgb(246,53,32)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1423.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1397" width="18.1818%" height="15" fill="rgb(242,122,36)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1407.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1381" width="18.1818%" height="15" fill="rgb(243,199,46)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1391.50">&lt;futures_lite::future::Catch..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::future::future::Future&gt;::poll (2 samples, 18.18%)</title><rect x="9.0909%" y="1365" width="18.1818%" height="15" fill="rgb(247,13,30)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1375.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_system_task::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1349" width="18.1818%" height="15" fill="rgb(214,138,4)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1359.50">bevy_ecs::schedule::executor..</text></g><g><title>std::panic::catch_unwind (2 samples, 18.18%)</title><rect x="9.0909%" y="1333" width="18.1818%" height="15" fill="rgb(205,164,17)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1343.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2 samples, 18.18%)</title><rect x="9.0909%" y="1317" width="18.1818%" height="15" fill="rgb(213,190,16)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1327.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2 samples, 18.18%)</title><rect x="9.0909%" y="1301" width="18.1818%" height="15" fill="rgb(207,218,43)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1311.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1285" width="18.1818%" height="15" fill="rgb(205,209,31)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1295.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 18.18%)</title><rect x="9.0909%" y="1269" width="18.1818%" height="15" fill="rgb(216,49,24)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1279.50">core::ops::function::FnOnce:..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_system_task::{{closure}}::{{closure}} (2 samples, 18.18%)</title><rect x="9.0909%" y="1253" width="18.1818%" height="15" fill="rgb(219,106,38)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1263.50">bevy_ecs::schedule::executor..</text></g><g><title>&lt;bevy_ecs::system::function_system::FunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run_unsafe (2 samples, 18.18%)</title><rect x="9.0909%" y="1237" width="18.1818%" height="15" fill="rgb(235,211,31)" fg:x="1" fg:w="2"/><text x="9.3409%" y="1247.50">&lt;bevy_ecs::system::function_..</text></g><g><title>&lt;Func as bevy_ecs::system::function_system::SystemParamFunction&lt;fn(F0,F1,F2,F3,F4) .&gt; Out&gt;&gt;::run (1 samples, 9.09%)</title><rect x="18.1818%" y="1221" width="9.0909%" height="15" fill="rgb(230,198,25)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1231.50">&lt;Func as bevy..</text></g><g><title>&lt;Func as bevy_ecs::system::function_system::SystemParamFunction&lt;fn(F0,F1,F2,F3,F4) .&gt; Out&gt;&gt;::run::call_inner (1 samples, 9.09%)</title><rect x="18.1818%" y="1205" width="9.0909%" height="15" fill="rgb(250,218,47)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1215.50">&lt;Func as bevy..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 9.09%)</title><rect x="18.1818%" y="1189" width="9.0909%" height="15" fill="rgb(212,3,26)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1199.50">core::ops::fu..</text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 9.09%)</title><rect x="18.1818%" y="1173" width="9.0909%" height="15" fill="rgb(213,156,20)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1183.50">core::ops::fu..</text></g><g><title>lightyear::server::replication::send::replicate (1 samples, 9.09%)</title><rect x="18.1818%" y="1157" width="9.0909%" height="15" fill="rgb(227,163,39)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1167.50">lightyear::se..</text></g><g><title>lightyear::shared::replication::send::ReplicationSender::prepare_entity_spawn (1 samples, 9.09%)</title><rect x="18.1818%" y="1141" width="9.0909%" height="15" fill="rgb(231,31,10)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1151.50">lightyear::sh..</text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_default (1 samples, 9.09%)</title><rect x="18.1818%" y="1125" width="9.0909%" height="15" fill="rgb(249,44,48)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1135.50">hashbrown::ma..</text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (1 samples, 9.09%)</title><rect x="18.1818%" y="1109" width="9.0909%" height="15" fill="rgb(241,61,17)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1119.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (1 samples, 9.09%)</title><rect x="18.1818%" y="1093" width="9.0909%" height="15" fill="rgb(247,113,23)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1103.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1 samples, 9.09%)</title><rect x="18.1818%" y="1077" width="9.0909%" height="15" fill="rgb(212,127,7)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1087.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 9.09%)</title><rect x="18.1818%" y="1061" width="9.0909%" height="15" fill="rgb(226,110,23)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1071.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 9.09%)</title><rect x="18.1818%" y="1045" width="9.0909%" height="15" fill="rgb(206,19,3)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1055.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (1 samples, 9.09%)</title><rect x="18.1818%" y="1029" width="9.0909%" height="15" fill="rgb(229,71,52)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1039.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (1 samples, 9.09%)</title><rect x="18.1818%" y="1013" width="9.0909%" height="15" fill="rgb(249,106,49)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1023.50">hashbrown::ra..</text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_resize (1 samples, 9.09%)</title><rect x="18.1818%" y="997" width="9.0909%" height="15" fill="rgb(250,172,42)" fg:x="2" fg:w="1"/><text x="18.4318%" y="1007.50">hashbrown::ra..</text></g><g><title>bevy_ecs::world::World::resource_scope (2 samples, 18.18%)</title><rect x="45.4545%" y="261" width="18.1818%" height="15" fill="rgb(217,84,35)" fg:x="5" fg:w="2"/><text x="45.7045%" y="271.50">bevy_ecs::world::World::reso..</text></g><g><title>lightyear::client::connection::ConnectionManager::receive::{{closure}} (2 samples, 18.18%)</title><rect x="45.4545%" y="245" width="18.1818%" height="15" fill="rgb(231,172,24)" fg:x="5" fg:w="2"/><text x="45.7045%" y="255.50">lightyear::client::connectio..</text></g><g><title>lightyear::shared::replication::receive::ReplicationReceiver::apply_world (1 samples, 9.09%)</title><rect x="54.5455%" y="229" width="9.0909%" height="15" fill="rgb(224,99,6)" fg:x="6" fg:w="1"/><text x="54.7955%" y="239.50">lightyear::sh..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 9.09%)</title><rect x="54.5455%" y="213" width="9.0909%" height="15" fill="rgb(213,88,45)" fg:x="6" fg:w="1"/><text x="54.7955%" y="223.50">core::iter::t..</text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 9.09%)</title><rect x="54.5455%" y="197" width="9.0909%" height="15" fill="rgb(210,171,14)" fg:x="6" fg:w="1"/><text x="54.7955%" y="207.50">&lt;hashbrown::m..</text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 9.09%)</title><rect x="54.5455%" y="181" width="9.0909%" height="15" fill="rgb(207,175,12)" fg:x="6" fg:w="1"/><text x="54.7955%" y="191.50">&lt;hashbrown::r..</text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::fold_impl (1 samples, 9.09%)</title><rect x="54.5455%" y="165" width="9.0909%" height="15" fill="rgb(234,170,12)" fg:x="6" fg:w="1"/><text x="54.7955%" y="175.50">hashbrown::ra..</text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold::{{closure}} (1 samples, 9.09%)</title><rect x="54.5455%" y="149" width="9.0909%" height="15" fill="rgb(222,71,35)" fg:x="6" fg:w="1"/><text x="54.7955%" y="159.50">&lt;hashbrown::m..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 9.09%)</title><rect x="54.5455%" y="133" width="9.0909%" height="15" fill="rgb(230,201,37)" fg:x="6" fg:w="1"/><text x="54.7955%" y="143.50">core::iter::t..</text></g><g><title>lightyear::shared::replication::receive::ReplicationReceiver::apply_world::{{closure}} (1 samples, 9.09%)</title><rect x="54.5455%" y="117" width="9.0909%" height="15" fill="rgb(220,96,31)" fg:x="6" fg:w="1"/><text x="54.7955%" y="127.50">lightyear::sh..</text></g><g><title>lightyear::shared::replication::receive::GroupChannel::apply_actions_message (1 samples, 9.09%)</title><rect x="54.5455%" y="101" width="9.0909%" height="15" fill="rgb(230,229,14)" fg:x="6" fg:w="1"/><text x="54.7955%" y="111.50">lightyear::sh..</text></g><g><title>core::ptr::drop_in_place&lt;lightyear::serialize::reader::Reader&gt; (1 samples, 9.09%)</title><rect x="54.5455%" y="85" width="9.0909%" height="15" fill="rgb(209,202,15)" fg:x="6" fg:w="1"/><text x="54.7955%" y="95.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::cursor::Cursor&lt;bytes::bytes::Bytes&gt;&gt; (1 samples, 9.09%)</title><rect x="54.5455%" y="69" width="9.0909%" height="15" fill="rgb(241,207,30)" fg:x="6" fg:w="1"/><text x="54.7955%" y="79.50">core::ptr::dr..</text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (1 samples, 9.09%)</title><rect x="54.5455%" y="53" width="9.0909%" height="15" fill="rgb(214,176,20)" fg:x="6" fg:w="1"/><text x="54.7955%" y="63.50">core::ptr::dr..</text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (1 samples, 9.09%)</title><rect x="54.5455%" y="37" width="9.0909%" height="15" fill="rgb(213,28,12)" fg:x="6" fg:w="1"/><text x="54.7955%" y="47.50">&lt;bytes::bytes..</text></g><g><title>&lt;bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (5 samples, 45.45%)</title><rect x="27.2727%" y="1269" width="45.4545%" height="15" fill="rgb(234,211,52)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1279.50">&lt;bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor as bev..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor (5 samples, 45.45%)</title><rect x="27.2727%" y="1253" width="45.4545%" height="15" fill="rgb(231,161,34)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1263.50">bevy_tasks::task_pool::TaskPool::scope_with_executor</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 45.45%)</title><rect x="27.2727%" y="1237" width="45.4545%" height="15" fill="rgb(219,226,40)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1247.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 45.45%)</title><rect x="27.2727%" y="1221" width="45.4545%" height="15" fill="rgb(223,185,36)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1231.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor::{{closure}} (5 samples, 45.45%)</title><rect x="27.2727%" y="1205" width="45.4545%" height="15" fill="rgb(217,175,23)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1215.50">bevy_tasks::task_pool::TaskPool::scope_with_executor::{{closure}}</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor_inner (5 samples, 45.45%)</title><rect x="27.2727%" y="1189" width="45.4545%" height="15" fill="rgb(254,32,41)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1199.50">bevy_tasks::task_pool::TaskPool::scope_with_executor_inner</text></g><g><title>futures_lite::future::block_on (5 samples, 45.45%)</title><rect x="27.2727%" y="1173" width="45.4545%" height="15" fill="rgb(212,17,11)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1183.50">futures_lite::future::block_on</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5 samples, 45.45%)</title><rect x="27.2727%" y="1157" width="45.4545%" height="15" fill="rgb(222,48,18)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1167.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5 samples, 45.45%)</title><rect x="27.2727%" y="1141" width="45.4545%" height="15" fill="rgb(230,18,28)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1151.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>futures_lite::future::block_on::{{closure}} (5 samples, 45.45%)</title><rect x="27.2727%" y="1125" width="45.4545%" height="15" fill="rgb(226,165,45)" fg:x="3" fg:w="5"/><text x="27.5227%" y="1135.50">futures_lite::future::block_on::{{closure}}</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor_inner::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="1109" width="27.2727%" height="15" fill="rgb(215,29,23)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1119.50">bevy_tasks::task_pool::TaskPool::scope_with_..</text></g><g><title>bevy_tasks::task_pool::TaskPool::execute_scope::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="1093" width="27.2727%" height="15" fill="rgb(253,103,38)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1103.50">bevy_tasks::task_pool::TaskPool::execute_sco..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3 samples, 27.27%)</title><rect x="45.4545%" y="1077" width="27.2727%" height="15" fill="rgb(207,43,34)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1087.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::fu..</text></g><g><title>bevy_tasks::task_pool::TaskPool::execute_scope::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="1061" width="27.2727%" height="15" fill="rgb(209,77,36)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1071.50">bevy_tasks::task_pool::TaskPool::execute_sco..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 27.27%)</title><rect x="45.4545%" y="1045" width="27.2727%" height="15" fill="rgb(240,34,5)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1055.50">&lt;futures_lite::future::CatchUnwind&lt;F&gt; as cor..</text></g><g><title>std::panic::catch_unwind (3 samples, 27.27%)</title><rect x="45.4545%" y="1029" width="27.2727%" height="15" fill="rgb(208,172,40)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 27.27%)</title><rect x="45.4545%" y="1013" width="27.2727%" height="15" fill="rgb(210,167,15)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1023.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 27.27%)</title><rect x="45.4545%" y="997" width="27.2727%" height="15" fill="rgb(227,109,9)" fg:x="5" fg:w="3"/><text x="45.7045%" y="1007.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="981" width="27.2727%" height="15" fill="rgb(209,62,2)" fg:x="5" fg:w="3"/><text x="45.7045%" y="991.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="965" width="27.2727%" height="15" fill="rgb(242,114,11)" fg:x="5" fg:w="3"/><text x="45.7045%" y="975.50">&lt;futures_lite::future::CatchUnwind&lt;F&gt; as cor..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 27.27%)</title><rect x="45.4545%" y="949" width="27.2727%" height="15" fill="rgb(252,181,5)" fg:x="5" fg:w="3"/><text x="45.7045%" y="959.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;..</text></g><g><title>bevy_tasks::task_pool::TaskPool::execute_scope::{{closure}}::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="933" width="27.2727%" height="15" fill="rgb(226,68,28)" fg:x="5" fg:w="3"/><text x="45.7045%" y="943.50">bevy_tasks::task_pool::TaskPool::execute_sco..</text></g><g><title>bevy_tasks::thread_executor::ThreadExecutorTicker::tick::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="917" width="27.2727%" height="15" fill="rgb(254,171,19)" fg:x="5" fg:w="3"/><text x="45.7045%" y="927.50">bevy_tasks::thread_executor::ThreadExecutorT..</text></g><g><title>async_executor::Executor::tick::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="901" width="27.2727%" height="15" fill="rgb(236,188,36)" fg:x="5" fg:w="3"/><text x="45.7045%" y="911.50">async_executor::Executor::tick::{{closure}}</text></g><g><title>async_executor::State::tick::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="885" width="27.2727%" height="15" fill="rgb(214,17,8)" fg:x="5" fg:w="3"/><text x="45.7045%" y="895.50">async_executor::State::tick::{{closure}}</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::run (3 samples, 27.27%)</title><rect x="45.4545%" y="869" width="27.2727%" height="15" fill="rgb(237,139,49)" fg:x="5" fg:w="3"/><text x="45.7045%" y="879.50">async_task::runnable::Runnable&lt;M&gt;::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::run (3 samples, 27.27%)</title><rect x="45.4545%" y="853" width="27.2727%" height="15" fill="rgb(248,42,53)" fg:x="5" fg:w="3"/><text x="45.7045%" y="863.50">async_task::raw::RawTask&lt;F,T,S,M&gt;::run</text></g><g><title>async_executor::Executor::spawn_inner::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="837" width="27.2727%" height="15" fill="rgb(231,89,0)" fg:x="5" fg:w="3"/><text x="45.7045%" y="847.50">async_executor::Executor::spawn_inner::{{clo..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 27.27%)</title><rect x="45.4545%" y="821" width="27.2727%" height="15" fill="rgb(225,81,40)" fg:x="5" fg:w="3"/><text x="45.7045%" y="831.50">&lt;futures_lite::future::CatchUnwind&lt;F&gt; as cor..</text></g><g><title>std::panic::catch_unwind (3 samples, 27.27%)</title><rect x="45.4545%" y="805" width="27.2727%" height="15" fill="rgb(209,150,28)" fg:x="5" fg:w="3"/><text x="45.7045%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 27.27%)</title><rect x="45.4545%" y="789" width="27.2727%" height="15" fill="rgb(252,110,43)" fg:x="5" fg:w="3"/><text x="45.7045%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 27.27%)</title><rect x="45.4545%" y="773" width="27.2727%" height="15" fill="rgb(245,187,54)" fg:x="5" fg:w="3"/><text x="45.7045%" y="783.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="757" width="27.2727%" height="15" fill="rgb(233,37,49)" fg:x="5" fg:w="3"/><text x="45.7045%" y="767.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;..</text></g><g><title>&lt;futures_lite::future::CatchUnwind&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="741" width="27.2727%" height="15" fill="rgb(212,161,24)" fg:x="5" fg:w="3"/><text x="45.7045%" y="751.50">&lt;futures_lite::future::CatchUnwind&lt;F&gt; as cor..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::future::future::Future&gt;::poll (3 samples, 27.27%)</title><rect x="45.4545%" y="725" width="27.2727%" height="15" fill="rgb(228,67,54)" fg:x="5" fg:w="3"/><text x="45.7045%" y="735.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_exclusive_system_task::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="709" width="27.2727%" height="15" fill="rgb(229,44,4)" fg:x="5" fg:w="3"/><text x="45.7045%" y="719.50">bevy_ecs::schedule::executor::multi_threaded..</text></g><g><title>std::panic::catch_unwind (3 samples, 27.27%)</title><rect x="45.4545%" y="693" width="27.2727%" height="15" fill="rgb(228,139,53)" fg:x="5" fg:w="3"/><text x="45.7045%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3 samples, 27.27%)</title><rect x="45.4545%" y="677" width="27.2727%" height="15" fill="rgb(252,54,24)" fg:x="5" fg:w="3"/><text x="45.7045%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3 samples, 27.27%)</title><rect x="45.4545%" y="661" width="27.2727%" height="15" fill="rgb(208,170,37)" fg:x="5" fg:w="3"/><text x="45.7045%" y="671.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="645" width="27.2727%" height="15" fill="rgb(233,193,22)" fg:x="5" fg:w="3"/><text x="45.7045%" y="655.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 27.27%)</title><rect x="45.4545%" y="629" width="27.2727%" height="15" fill="rgb(217,109,30)" fg:x="5" fg:w="3"/><text x="45.7045%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_exclusive_system_task::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="613" width="27.2727%" height="15" fill="rgb(216,170,43)" fg:x="5" fg:w="3"/><text x="45.7045%" y="623.50">bevy_ecs::schedule::executor::multi_threaded..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run (3 samples, 27.27%)</title><rect x="45.4545%" y="597" width="27.2727%" height="15" fill="rgb(231,130,14)" fg:x="5" fg:w="3"/><text x="45.7045%" y="607.50">&lt;bevy_ecs::system::exclusive_function_system..</text></g><g><title>bevy_ecs::world::World::last_change_tick_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="581" width="27.2727%" height="15" fill="rgb(248,186,47)" fg:x="5" fg:w="3"/><text x="45.7045%" y="591.50">bevy_ecs::world::World::last_change_tick_sco..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="565" width="27.2727%" height="15" fill="rgb(213,116,19)" fg:x="5" fg:w="3"/><text x="45.7045%" y="575.50">&lt;bevy_ecs::system::exclusive_function_system..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run (3 samples, 27.27%)</title><rect x="45.4545%" y="549" width="27.2727%" height="15" fill="rgb(221,53,23)" fg:x="5" fg:w="3"/><text x="45.7045%" y="559.50">&lt;Func as bevy_ecs::system::exclusive_functio..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run::call_inner (3 samples, 27.27%)</title><rect x="45.4545%" y="533" width="27.2727%" height="15" fill="rgb(243,114,11)" fg:x="5" fg:w="3"/><text x="45.7045%" y="543.50">&lt;Func as bevy_ecs::system::exclusive_functio..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 27.27%)</title><rect x="45.4545%" y="517" width="27.2727%" height="15" fill="rgb(237,125,4)" fg:x="5" fg:w="3"/><text x="45.7045%" y="527.50">core::ops::function::impls::&lt;impl core::ops:..</text></g><g><title>core::ops::function::FnMut::call_mut (3 samples, 27.27%)</title><rect x="45.4545%" y="501" width="27.2727%" height="15" fill="rgb(230,53,21)" fg:x="5" fg:w="3"/><text x="45.7045%" y="511.50">core::ops::function::FnMut::call_mut</text></g><g><title>lightyear::client::networking::receive (3 samples, 27.27%)</title><rect x="45.4545%" y="485" width="27.2727%" height="15" fill="rgb(239,25,33)" fg:x="5" fg:w="3"/><text x="45.7045%" y="495.50">lightyear::client::networking::receive</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="469" width="27.2727%" height="15" fill="rgb(234,178,41)" fg:x="5" fg:w="3"/><text x="45.7045%" y="479.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="453" width="27.2727%" height="15" fill="rgb(205,114,28)" fg:x="5" fg:w="3"/><text x="45.7045%" y="463.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="437" width="27.2727%" height="15" fill="rgb(248,93,14)" fg:x="5" fg:w="3"/><text x="45.7045%" y="447.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="421" width="27.2727%" height="15" fill="rgb(253,13,6)" fg:x="5" fg:w="3"/><text x="45.7045%" y="431.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="405" width="27.2727%" height="15" fill="rgb(233,203,17)" fg:x="5" fg:w="3"/><text x="45.7045%" y="415.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}}::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="389" width="27.2727%" height="15" fill="rgb(217,185,42)" fg:x="5" fg:w="3"/><text x="45.7045%" y="399.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="373" width="27.2727%" height="15" fill="rgb(226,110,52)" fg:x="5" fg:w="3"/><text x="45.7045%" y="383.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="357" width="27.2727%" height="15" fill="rgb(210,222,0)" fg:x="5" fg:w="3"/><text x="45.7045%" y="367.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="341" width="27.2727%" height="15" fill="rgb(243,64,50)" fg:x="5" fg:w="3"/><text x="45.7045%" y="351.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="325" width="27.2727%" height="15" fill="rgb(228,54,11)" fg:x="5" fg:w="3"/><text x="45.7045%" y="335.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>bevy_ecs::world::World::resource_scope (3 samples, 27.27%)</title><rect x="45.4545%" y="309" width="27.2727%" height="15" fill="rgb(205,81,5)" fg:x="5" fg:w="3"/><text x="45.7045%" y="319.50">bevy_ecs::world::World::resource_scope</text></g><g><title>lightyear::client::networking::receive::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}}::{{closure}} (3 samples, 27.27%)</title><rect x="45.4545%" y="293" width="27.2727%" height="15" fill="rgb(214,146,44)" fg:x="5" fg:w="3"/><text x="45.7045%" y="303.50">lightyear::client::networking::receive::{{cl..</text></g><g><title>lightyear::client::connection::ConnectionManager::receive (3 samples, 27.27%)</title><rect x="45.4545%" y="277" width="27.2727%" height="15" fill="rgb(222,149,52)" fg:x="5" fg:w="3"/><text x="45.7045%" y="287.50">lightyear::client::connection::ConnectionMan..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 9.09%)</title><rect x="63.6364%" y="261" width="9.0909%" height="15" fill="rgb(215,113,17)" fg:x="7" fg:w="1"/><text x="63.8864%" y="271.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 9.09%)</title><rect x="63.6364%" y="245" width="9.0909%" height="15" fill="rgb(224,98,4)" fg:x="7" fg:w="1"/><text x="63.8864%" y="255.50">core::iter::t..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::{{closure}} (1 samples, 9.09%)</title><rect x="63.6364%" y="229" width="9.0909%" height="15" fill="rgb(237,105,13)" fg:x="7" fg:w="1"/><text x="63.8864%" y="239.50">core::iter::t..</text></g><g><title>lightyear::client::connection::ConnectionManager::receive::{{closure}} (1 samples, 9.09%)</title><rect x="63.6364%" y="213" width="9.0909%" height="15" fill="rgb(219,10,22)" fg:x="7" fg:w="1"/><text x="63.8864%" y="223.50">lightyear::cl..</text></g><g><title>&lt;lightyear::shared::replication::EntityActionsMessage as lightyear::serialize::ToBytes&gt;::from_bytes (1 samples, 9.09%)</title><rect x="63.6364%" y="197" width="9.0909%" height="15" fill="rgb(227,157,51)" fg:x="7" fg:w="1"/><text x="63.8864%" y="207.50">&lt;lightyear::s..</text></g><g><title>&lt;lightyear_benches::local_stepper::LocalBevyStepper as lightyear_benches::local_stepper::Step&gt;::client_update (6 samples, 54.55%)</title><rect x="27.2727%" y="1717" width="54.5455%" height="15" fill="rgb(236,88,9)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1727.50">&lt;lightyear_benches::local_stepper::LocalBevyStepper as lightyear_benches::local_stepper::S..</text></g><g><title>bevy_app::app::App::update (6 samples, 54.55%)</title><rect x="27.2727%" y="1701" width="54.5455%" height="15" fill="rgb(253,218,4)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1711.50">bevy_app::app::App::update</text></g><g><title>bevy_ecs::world::World::run_schedule (6 samples, 54.55%)</title><rect x="27.2727%" y="1685" width="54.5455%" height="15" fill="rgb(242,176,13)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1695.50">bevy_ecs::world::World::run_schedule</text></g><g><title>bevy_ecs::world::World::schedule_scope (6 samples, 54.55%)</title><rect x="27.2727%" y="1669" width="54.5455%" height="15" fill="rgb(232,21,37)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1679.50">bevy_ecs::world::World::schedule_scope</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (6 samples, 54.55%)</title><rect x="27.2727%" y="1653" width="54.5455%" height="15" fill="rgb(236,108,34)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1663.50">bevy_ecs::world::World::try_schedule_scope</text></g><g><title>bevy_ecs::world::World::run_schedule::{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1637" width="54.5455%" height="15" fill="rgb(231,33,36)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1647.50">bevy_ecs::world::World::run_schedule::{{closure}}</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (6 samples, 54.55%)</title><rect x="27.2727%" y="1621" width="54.5455%" height="15" fill="rgb(243,154,23)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1631.50">bevy_ecs::schedule::schedule::Schedule::run</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (6 samples, 54.55%)</title><rect x="27.2727%" y="1605" width="54.5455%" height="15" fill="rgb(246,135,16)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1615.50">&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedu..</text></g><g><title>std::panic::catch_unwind (6 samples, 54.55%)</title><rect x="27.2727%" y="1589" width="54.5455%" height="15" fill="rgb(241,72,51)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1599.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (6 samples, 54.55%)</title><rect x="27.2727%" y="1573" width="54.5455%" height="15" fill="rgb(235,38,12)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1583.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (6 samples, 54.55%)</title><rect x="27.2727%" y="1557" width="54.5455%" height="15" fill="rgb(250,23,1)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1567.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (6 samples, 54.55%)</title><rect x="27.2727%" y="1541" width="54.5455%" height="15" fill="rgb(250,101,35)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1551.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_o..</text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 54.55%)</title><rect x="27.2727%" y="1525" width="54.5455%" height="15" fill="rgb(236,60,6)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1535.50">core::ops::function::FnOnce::call_once</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run::{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1509" width="54.5455%" height="15" fill="rgb(208,27,48)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1519.50">&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedu..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run (6 samples, 54.55%)</title><rect x="27.2727%" y="1493" width="54.5455%" height="15" fill="rgb(213,143,40)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1503.50">&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ec..</text></g><g><title>bevy_ecs::world::World::last_change_tick_scope (6 samples, 54.55%)</title><rect x="27.2727%" y="1477" width="54.5455%" height="15" fill="rgb(249,82,39)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1487.50">bevy_ecs::world::World::last_change_tick_scope</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run::{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1461" width="54.5455%" height="15" fill="rgb(235,108,5)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1471.50">&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ec..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) .&gt; Out&gt;&gt;::run (6 samples, 54.55%)</title><rect x="27.2727%" y="1445" width="54.5455%" height="15" fill="rgb(233,171,35)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1455.50">&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) ..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) .&gt; Out&gt;&gt;::run::call_inner (6 samples, 54.55%)</title><rect x="27.2727%" y="1429" width="54.5455%" height="15" fill="rgb(245,16,8)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1439.50">&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) ..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 54.55%)</title><rect x="27.2727%" y="1413" width="54.5455%" height="15" fill="rgb(244,174,54)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1423.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>core::ops::function::FnMut::call_mut (6 samples, 54.55%)</title><rect x="27.2727%" y="1397" width="54.5455%" height="15" fill="rgb(221,111,21)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1407.50">core::ops::function::FnMut::call_mut</text></g><g><title>bevy_app::main_schedule::Main::run_main (6 samples, 54.55%)</title><rect x="27.2727%" y="1381" width="54.5455%" height="15" fill="rgb(220,178,35)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1391.50">bevy_app::main_schedule::Main::run_main</text></g><g><title>bevy_ecs::world::World::resource_scope (6 samples, 54.55%)</title><rect x="27.2727%" y="1365" width="54.5455%" height="15" fill="rgb(236,8,29)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1375.50">bevy_ecs::world::World::resource_scope</text></g><g><title>bevy_app::main_schedule::Main::run_main::{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1349" width="54.5455%" height="15" fill="rgb(217,11,4)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1359.50">bevy_app::main_schedule::Main::run_main::{{closure}}</text></g><g><title>bevy_ecs::world::World::try_run_schedule (6 samples, 54.55%)</title><rect x="27.2727%" y="1333" width="54.5455%" height="15" fill="rgb(253,101,1)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1343.50">bevy_ecs::world::World::try_run_schedule</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (6 samples, 54.55%)</title><rect x="27.2727%" y="1317" width="54.5455%" height="15" fill="rgb(237,171,30)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1327.50">bevy_ecs::world::World::try_schedule_scope</text></g><g><title>bevy_ecs::world::World::try_run_schedule::{{closure}} (6 samples, 54.55%)</title><rect x="27.2727%" y="1301" width="54.5455%" height="15" fill="rgb(236,0,44)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1311.50">bevy_ecs::world::World::try_run_schedule::{{closure}}</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (6 samples, 54.55%)</title><rect x="27.2727%" y="1285" width="54.5455%" height="15" fill="rgb(225,13,31)" fg:x="3" fg:w="6"/><text x="27.5227%" y="1295.50">bevy_ecs::schedule::schedule::Schedule::run</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="1269" width="9.0909%" height="15" fill="rgb(236,45,26)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1279.50">&lt;bevy_ecs::sc..</text></g><g><title>std::panic::catch_unwind (1 samples, 9.09%)</title><rect x="72.7273%" y="1253" width="9.0909%" height="15" fill="rgb(242,82,41)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1263.50">std::panic::c..</text></g><g><title>std::panicking::try (1 samples, 9.09%)</title><rect x="72.7273%" y="1237" width="9.0909%" height="15" fill="rgb(212,41,8)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1247.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1 samples, 9.09%)</title><rect x="72.7273%" y="1221" width="9.0909%" height="15" fill="rgb(235,217,20)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1231.50">std::panickin..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="72.7273%" y="1205" width="9.0909%" height="15" fill="rgb(232,226,4)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1215.50">&lt;core::panic:..</text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 9.09%)</title><rect x="72.7273%" y="1189" width="9.0909%" height="15" fill="rgb(242,207,17)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1199.50">core::ops::fu..</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="1173" width="9.0909%" height="15" fill="rgb(212,53,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1183.50">&lt;bevy_ecs::sc..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="1157" width="9.0909%" height="15" fill="rgb(224,147,13)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1167.50">&lt;bevy_ecs::sy..</text></g><g><title>bevy_ecs::world::World::last_change_tick_scope (1 samples, 9.09%)</title><rect x="72.7273%" y="1141" width="9.0909%" height="15" fill="rgb(219,125,37)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1151.50">bevy_ecs::wor..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="1125" width="9.0909%" height="15" fill="rgb(223,166,9)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1135.50">&lt;bevy_ecs::sy..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="1109" width="9.0909%" height="15" fill="rgb(238,196,24)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1119.50">&lt;Func as bevy..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run::call_inner (1 samples, 9.09%)</title><rect x="72.7273%" y="1093" width="9.0909%" height="15" fill="rgb(239,206,23)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1103.50">&lt;Func as bevy..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 9.09%)</title><rect x="72.7273%" y="1077" width="9.0909%" height="15" fill="rgb(248,103,25)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1087.50">core::ops::fu..</text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 9.09%)</title><rect x="72.7273%" y="1061" width="9.0909%" height="15" fill="rgb(219,162,1)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1071.50">core::ops::fu..</text></g><g><title>bevy_time::fixed::run_fixed_main_schedule (1 samples, 9.09%)</title><rect x="72.7273%" y="1045" width="9.0909%" height="15" fill="rgb(214,180,32)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1055.50">bevy_time::fi..</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (1 samples, 9.09%)</title><rect x="72.7273%" y="1029" width="9.0909%" height="15" fill="rgb(244,196,25)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1039.50">bevy_ecs::wor..</text></g><g><title>bevy_time::fixed::run_fixed_main_schedule::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="1013" width="9.0909%" height="15" fill="rgb(215,82,18)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1023.50">bevy_time::fi..</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (1 samples, 9.09%)</title><rect x="72.7273%" y="997" width="9.0909%" height="15" fill="rgb(211,3,31)" fg:x="8" fg:w="1"/><text x="72.9773%" y="1007.50">bevy_ecs::sch..</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="981" width="9.0909%" height="15" fill="rgb(248,8,20)" fg:x="8" fg:w="1"/><text x="72.9773%" y="991.50">&lt;bevy_ecs::sc..</text></g><g><title>std::panic::catch_unwind (1 samples, 9.09%)</title><rect x="72.7273%" y="965" width="9.0909%" height="15" fill="rgb(241,173,18)" fg:x="8" fg:w="1"/><text x="72.9773%" y="975.50">std::panic::c..</text></g><g><title>std::panicking::try (1 samples, 9.09%)</title><rect x="72.7273%" y="949" width="9.0909%" height="15" fill="rgb(210,12,47)" fg:x="8" fg:w="1"/><text x="72.9773%" y="959.50">std::panickin..</text></g><g><title>std::panicking::try::do_call (1 samples, 9.09%)</title><rect x="72.7273%" y="933" width="9.0909%" height="15" fill="rgb(246,73,40)" fg:x="8" fg:w="1"/><text x="72.9773%" y="943.50">std::panickin..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 9.09%)</title><rect x="72.7273%" y="917" width="9.0909%" height="15" fill="rgb(216,46,23)" fg:x="8" fg:w="1"/><text x="72.9773%" y="927.50">&lt;core::panic:..</text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 9.09%)</title><rect x="72.7273%" y="901" width="9.0909%" height="15" fill="rgb(216,159,33)" fg:x="8" fg:w="1"/><text x="72.9773%" y="911.50">core::ops::fu..</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="885" width="9.0909%" height="15" fill="rgb(219,34,20)" fg:x="8" fg:w="1"/><text x="72.9773%" y="895.50">&lt;bevy_ecs::sc..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="869" width="9.0909%" height="15" fill="rgb(218,119,16)" fg:x="8" fg:w="1"/><text x="72.9773%" y="879.50">&lt;bevy_ecs::sy..</text></g><g><title>bevy_ecs::world::World::last_change_tick_scope (1 samples, 9.09%)</title><rect x="72.7273%" y="853" width="9.0909%" height="15" fill="rgb(223,77,52)" fg:x="8" fg:w="1"/><text x="72.9773%" y="863.50">bevy_ecs::wor..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="837" width="9.0909%" height="15" fill="rgb(253,201,52)" fg:x="8" fg:w="1"/><text x="72.9773%" y="847.50">&lt;bevy_ecs::sy..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="821" width="9.0909%" height="15" fill="rgb(220,81,40)" fg:x="8" fg:w="1"/><text x="72.9773%" y="831.50">&lt;Func as bevy..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn() .&gt; Out&gt;&gt;::run::call_inner (1 samples, 9.09%)</title><rect x="72.7273%" y="805" width="9.0909%" height="15" fill="rgb(246,79,43)" fg:x="8" fg:w="1"/><text x="72.9773%" y="815.50">&lt;Func as bevy..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 9.09%)</title><rect x="72.7273%" y="789" width="9.0909%" height="15" fill="rgb(240,229,9)" fg:x="8" fg:w="1"/><text x="72.9773%" y="799.50">core::ops::fu..</text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 9.09%)</title><rect x="72.7273%" y="773" width="9.0909%" height="15" fill="rgb(211,129,9)" fg:x="8" fg:w="1"/><text x="72.9773%" y="783.50">core::ops::fu..</text></g><g><title>bevy_app::main_schedule::FixedMain::run_fixed_main (1 samples, 9.09%)</title><rect x="72.7273%" y="757" width="9.0909%" height="15" fill="rgb(232,125,51)" fg:x="8" fg:w="1"/><text x="72.9773%" y="767.50">bevy_app::mai..</text></g><g><title>bevy_ecs::world::World::resource_scope (1 samples, 9.09%)</title><rect x="72.7273%" y="741" width="9.0909%" height="15" fill="rgb(228,49,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="751.50">bevy_ecs::wor..</text></g><g><title>bevy_app::main_schedule::FixedMain::run_fixed_main::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="725" width="9.0909%" height="15" fill="rgb(227,203,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="735.50">bevy_app::mai..</text></g><g><title>bevy_ecs::world::World::try_run_schedule (1 samples, 9.09%)</title><rect x="72.7273%" y="709" width="9.0909%" height="15" fill="rgb(239,128,23)" fg:x="8" fg:w="1"/><text x="72.9773%" y="719.50">bevy_ecs::wor..</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (1 samples, 9.09%)</title><rect x="72.7273%" y="693" width="9.0909%" height="15" fill="rgb(250,206,35)" fg:x="8" fg:w="1"/><text x="72.9773%" y="703.50">bevy_ecs::wor..</text></g><g><title>bevy_ecs::world::World::try_run_schedule::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="677" width="9.0909%" height="15" fill="rgb(234,126,52)" fg:x="8" fg:w="1"/><text x="72.9773%" y="687.50">bevy_ecs::wor..</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (1 samples, 9.09%)</title><rect x="72.7273%" y="661" width="9.0909%" height="15" fill="rgb(235,192,32)" fg:x="8" fg:w="1"/><text x="72.9773%" y="671.50">bevy_ecs::sch..</text></g><g><title>&lt;bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (1 samples, 9.09%)</title><rect x="72.7273%" y="645" width="9.0909%" height="15" fill="rgb(252,153,53)" fg:x="8" fg:w="1"/><text x="72.9773%" y="655.50">&lt;bevy_ecs::sc..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor (1 samples, 9.09%)</title><rect x="72.7273%" y="629" width="9.0909%" height="15" fill="rgb(247,212,30)" fg:x="8" fg:w="1"/><text x="72.9773%" y="639.50">bevy_tasks::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 9.09%)</title><rect x="72.7273%" y="613" width="9.0909%" height="15" fill="rgb(214,106,43)" fg:x="8" fg:w="1"/><text x="72.9773%" y="623.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 9.09%)</title><rect x="72.7273%" y="597" width="9.0909%" height="15" fill="rgb(208,41,12)" fg:x="8" fg:w="1"/><text x="72.9773%" y="607.50">std::thread::..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="581" width="9.0909%" height="15" fill="rgb(215,162,31)" fg:x="8" fg:w="1"/><text x="72.9773%" y="591.50">bevy_tasks::t..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor_inner (1 samples, 9.09%)</title><rect x="72.7273%" y="565" width="9.0909%" height="15" fill="rgb(245,115,43)" fg:x="8" fg:w="1"/><text x="72.9773%" y="575.50">bevy_tasks::t..</text></g><g><title>futures_lite::future::block_on (1 samples, 9.09%)</title><rect x="72.7273%" y="549" width="9.0909%" height="15" fill="rgb(251,167,8)" fg:x="8" fg:w="1"/><text x="72.9773%" y="559.50">futures_lite:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 9.09%)</title><rect x="72.7273%" y="533" width="9.0909%" height="15" fill="rgb(250,149,51)" fg:x="8" fg:w="1"/><text x="72.9773%" y="543.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 9.09%)</title><rect x="72.7273%" y="517" width="9.0909%" height="15" fill="rgb(253,195,24)" fg:x="8" fg:w="1"/><text x="72.9773%" y="527.50">std::thread::..</text></g><g><title>futures_lite::future::block_on::{{closure}} (1 samples, 9.09%)</title><rect x="72.7273%" y="501" width="9.0909%" height="15" fill="rgb(221,181,20)" fg:x="8" fg:w="1"/><text x="72.9773%" y="511.50">futures_lite:..</text></g><g><title>bevy_tasks::task_pool::Scope&lt;T&gt;::spawn (1 samples, 9.09%)</title><rect x="81.8182%" y="1173" width="9.0909%" height="15" fill="rgb(240,78,54)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1183.50">bevy_tasks::t..</text></g><g><title>async_executor::Executor::spawn (1 samples, 9.09%)</title><rect x="81.8182%" y="1157" width="9.0909%" height="15" fill="rgb(207,228,36)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1167.50">async_executo..</text></g><g><title>async_executor::Executor::spawn_inner (1 samples, 9.09%)</title><rect x="81.8182%" y="1141" width="9.0909%" height="15" fill="rgb(210,135,42)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1151.50">async_executo..</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::schedule (1 samples, 9.09%)</title><rect x="81.8182%" y="1125" width="9.0909%" height="15" fill="rgb(245,143,34)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1135.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::schedule (1 samples, 9.09%)</title><rect x="81.8182%" y="1109" width="9.0909%" height="15" fill="rgb(213,108,16)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1119.50">async_task::r..</text></g><g><title>alloc::task::raw_waker::wake (1 samples, 9.09%)</title><rect x="81.8182%" y="1093" width="9.0909%" height="15" fill="rgb(232,137,37)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1103.50">alloc::task::..</text></g><g><title>&lt;parking::Inner as alloc::task::Wake&gt;::wake (1 samples, 9.09%)</title><rect x="81.8182%" y="1077" width="9.0909%" height="15" fill="rgb(211,107,7)" fg:x="9" fg:w="1"/><text x="82.0682%" y="1087.50">&lt;parking::Inn..</text></g><g><title>all (11 samples, 100%)</title><rect x="0.0000%" y="1973" width="100.0000%" height="15" fill="rgb(243,145,42)" fg:x="0" fg:w="11"/><text x="0.2500%" y="1983.50"></text></g><g><title>8373566144 (8 samples, 72.73%)</title><rect x="27.2727%" y="1957" width="72.7273%" height="15" fill="rgb(237,214,6)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1967.50">8373566144</text></g><g><title>_main (8 samples, 72.73%)</title><rect x="27.2727%" y="1941" width="72.7273%" height="15" fill="rgb(253,173,30)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1951.50">_main</text></g><g><title>std::rt::lang_start_internal (8 samples, 72.73%)</title><rect x="27.2727%" y="1925" width="72.7273%" height="15" fill="rgb(206,171,54)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1935.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8 samples, 72.73%)</title><rect x="27.2727%" y="1909" width="72.7273%" height="15" fill="rgb(227,88,43)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1919.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8 samples, 72.73%)</title><rect x="27.2727%" y="1893" width="72.7273%" height="15" fill="rgb(223,24,30)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1903.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8 samples, 72.73%)</title><rect x="27.2727%" y="1877" width="72.7273%" height="15" fill="rgb(214,179,43)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1887.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (8 samples, 72.73%)</title><rect x="27.2727%" y="1861" width="72.7273%" height="15" fill="rgb(207,0,19)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1871.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (8 samples, 72.73%)</title><rect x="27.2727%" y="1845" width="72.7273%" height="15" fill="rgb(240,211,20)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1855.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8 samples, 72.73%)</title><rect x="27.2727%" y="1829" width="72.7273%" height="15" fill="rgb(222,208,44)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1839.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8 samples, 72.73%)</title><rect x="27.2727%" y="1813" width="72.7273%" height="15" fill="rgb(250,191,20)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1823.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 72.73%)</title><rect x="27.2727%" y="1797" width="72.7273%" height="15" fill="rgb(228,48,39)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1807.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8 samples, 72.73%)</title><rect x="27.2727%" y="1781" width="72.7273%" height="15" fill="rgb(245,0,30)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1791.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 72.73%)</title><rect x="27.2727%" y="1765" width="72.7273%" height="15" fill="rgb(235,217,51)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1775.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8 samples, 72.73%)</title><rect x="27.2727%" y="1749" width="72.7273%" height="15" fill="rgb(238,17,8)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1759.50">core::ops::function::FnOnce::call_once</text></g><g><title>replication_profiling::main (8 samples, 72.73%)</title><rect x="27.2727%" y="1733" width="72.7273%" height="15" fill="rgb(245,96,5)" fg:x="3" fg:w="8"/><text x="27.5227%" y="1743.50">replication_profiling::main</text></g><g><title>bevy_app::app::App::update (2 samples, 18.18%)</title><rect x="81.8182%" y="1717" width="18.1818%" height="15" fill="rgb(240,79,27)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1727.50">bevy_app::app::App::update</text></g><g><title>bevy_ecs::world::World::run_schedule (2 samples, 18.18%)</title><rect x="81.8182%" y="1701" width="18.1818%" height="15" fill="rgb(254,195,6)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1711.50">bevy_ecs::world::World::run_..</text></g><g><title>bevy_ecs::world::World::schedule_scope (2 samples, 18.18%)</title><rect x="81.8182%" y="1685" width="18.1818%" height="15" fill="rgb(210,8,11)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1695.50">bevy_ecs::world::World::sche..</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (2 samples, 18.18%)</title><rect x="81.8182%" y="1669" width="18.1818%" height="15" fill="rgb(215,202,24)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1679.50">bevy_ecs::world::World::try_..</text></g><g><title>bevy_ecs::world::World::run_schedule::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1653" width="18.1818%" height="15" fill="rgb(214,76,25)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1663.50">bevy_ecs::world::World::run_..</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1637" width="18.1818%" height="15" fill="rgb(248,194,45)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1647.50">bevy_ecs::schedule::schedule..</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1621" width="18.1818%" height="15" fill="rgb(217,71,51)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1631.50">&lt;bevy_ecs::schedule::executo..</text></g><g><title>std::panic::catch_unwind (2 samples, 18.18%)</title><rect x="81.8182%" y="1605" width="18.1818%" height="15" fill="rgb(220,50,10)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1615.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2 samples, 18.18%)</title><rect x="81.8182%" y="1589" width="18.1818%" height="15" fill="rgb(221,101,53)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1599.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2 samples, 18.18%)</title><rect x="81.8182%" y="1573" width="18.1818%" height="15" fill="rgb(239,119,25)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1583.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 18.18%)</title><rect x="81.8182%" y="1557" width="18.1818%" height="15" fill="rgb(231,22,50)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1567.50">&lt;core::panic::unwind_safe::A..</text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 18.18%)</title><rect x="81.8182%" y="1541" width="18.1818%" height="15" fill="rgb(244,167,10)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1551.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;bevy_ecs::schedule::executor::single_threaded::SingleThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1525" width="18.1818%" height="15" fill="rgb(207,137,21)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1535.50">&lt;bevy_ecs::schedule::executo..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1509" width="18.1818%" height="15" fill="rgb(254,87,17)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1519.50">&lt;bevy_ecs::system::exclusive..</text></g><g><title>bevy_ecs::world::World::last_change_tick_scope (2 samples, 18.18%)</title><rect x="81.8182%" y="1493" width="18.1818%" height="15" fill="rgb(212,77,11)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1503.50">bevy_ecs::world::World::last..</text></g><g><title>&lt;bevy_ecs::system::exclusive_function_system::ExclusiveFunctionSystem&lt;Marker,F&gt; as bevy_ecs::system::system::System&gt;::run::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1477" width="18.1818%" height="15" fill="rgb(238,76,21)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1487.50">&lt;bevy_ecs::system::exclusive..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) .&gt; Out&gt;&gt;::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1461" width="18.1818%" height="15" fill="rgb(248,186,16)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1471.50">&lt;Func as bevy_ecs::system::e..</text></g><g><title>&lt;Func as bevy_ecs::system::exclusive_function_system::ExclusiveSystemParamFunction&lt;fn(F0) .&gt; Out&gt;&gt;::run::call_inner (2 samples, 18.18%)</title><rect x="81.8182%" y="1445" width="18.1818%" height="15" fill="rgb(205,66,42)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1455.50">&lt;Func as bevy_ecs::system::e..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 18.18%)</title><rect x="81.8182%" y="1429" width="18.1818%" height="15" fill="rgb(218,96,41)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1439.50">core::ops::function::impls::..</text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 18.18%)</title><rect x="81.8182%" y="1413" width="18.1818%" height="15" fill="rgb(249,46,49)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1423.50">core::ops::function::FnMut::..</text></g><g><title>bevy_app::main_schedule::Main::run_main (2 samples, 18.18%)</title><rect x="81.8182%" y="1397" width="18.1818%" height="15" fill="rgb(208,229,4)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1407.50">bevy_app::main_schedule::Mai..</text></g><g><title>bevy_ecs::world::World::resource_scope (2 samples, 18.18%)</title><rect x="81.8182%" y="1381" width="18.1818%" height="15" fill="rgb(215,179,25)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1391.50">bevy_ecs::world::World::reso..</text></g><g><title>bevy_app::main_schedule::Main::run_main::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1365" width="18.1818%" height="15" fill="rgb(239,156,42)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1375.50">bevy_app::main_schedule::Mai..</text></g><g><title>bevy_ecs::world::World::try_run_schedule (2 samples, 18.18%)</title><rect x="81.8182%" y="1349" width="18.1818%" height="15" fill="rgb(220,61,45)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1359.50">bevy_ecs::world::World::try_..</text></g><g><title>bevy_ecs::world::World::try_schedule_scope (2 samples, 18.18%)</title><rect x="81.8182%" y="1333" width="18.1818%" height="15" fill="rgb(206,68,53)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1343.50">bevy_ecs::world::World::try_..</text></g><g><title>bevy_ecs::world::World::try_run_schedule::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1317" width="18.1818%" height="15" fill="rgb(221,26,43)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1327.50">bevy_ecs::world::World::try_..</text></g><g><title>bevy_ecs::schedule::schedule::Schedule::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1301" width="18.1818%" height="15" fill="rgb(233,121,34)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1311.50">bevy_ecs::schedule::schedule..</text></g><g><title>&lt;bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run (2 samples, 18.18%)</title><rect x="81.8182%" y="1285" width="18.1818%" height="15" fill="rgb(246,44,22)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1295.50">&lt;bevy_ecs::schedule::executo..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor (2 samples, 18.18%)</title><rect x="81.8182%" y="1269" width="18.1818%" height="15" fill="rgb(226,29,17)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1279.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 18.18%)</title><rect x="81.8182%" y="1253" width="18.1818%" height="15" fill="rgb(242,201,43)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1263.50">std::thread::local::LocalKey..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 18.18%)</title><rect x="81.8182%" y="1237" width="18.1818%" height="15" fill="rgb(214,102,1)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1247.50">std::thread::local::LocalKey..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1221" width="18.1818%" height="15" fill="rgb(216,153,54)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1231.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>bevy_tasks::task_pool::TaskPool::scope_with_executor_inner (2 samples, 18.18%)</title><rect x="81.8182%" y="1205" width="18.1818%" height="15" fill="rgb(228,96,44)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1215.50">bevy_tasks::task_pool::TaskP..</text></g><g><title>&lt;bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor as bevy_ecs::schedule::executor::SystemExecutor&gt;::run::{{closure}} (2 samples, 18.18%)</title><rect x="81.8182%" y="1189" width="18.1818%" height="15" fill="rgb(242,156,20)" fg:x="9" fg:w="2"/><text x="82.0682%" y="1199.50">&lt;bevy_ecs::schedule::executo..</text></g><g><title>futures_lite::future::block_on (1 samples, 9.09%)</title><rect x="90.9091%" y="1173" width="9.0909%" height="15" fill="rgb(246,141,41)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1183.50">futures_lite:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 9.09%)</title><rect x="90.9091%" y="1157" width="9.0909%" height="15" fill="rgb(211,2,26)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1167.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 9.09%)</title><rect x="90.9091%" y="1141" width="9.0909%" height="15" fill="rgb(210,39,45)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1151.50">std::thread::..</text></g><g><title>futures_lite::future::block_on::{{closure}} (1 samples, 9.09%)</title><rect x="90.9091%" y="1125" width="9.0909%" height="15" fill="rgb(213,81,14)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1135.50">futures_lite:..</text></g><g><title>&lt;futures_lite::future::PollOnce&lt;F&gt; as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="90.9091%" y="1109" width="9.0909%" height="15" fill="rgb(249,115,39)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1119.50">&lt;futures_lite..</text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="90.9091%" y="1093" width="9.0909%" height="15" fill="rgb(237,180,40)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1103.50">&lt;&amp;mut F as co..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1 samples, 9.09%)</title><rect x="90.9091%" y="1077" width="9.0909%" height="15" fill="rgb(222,47,2)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1087.50">&lt;core::pin::P..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_system_tasks (1 samples, 9.09%)</title><rect x="90.9091%" y="1061" width="9.0909%" height="15" fill="rgb(235,168,10)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1071.50">bevy_ecs::sch..</text></g><g><title>bevy_ecs::schedule::executor::multi_threaded::MultiThreadedExecutor::spawn_system_task (1 samples, 9.09%)</title><rect x="90.9091%" y="1045" width="9.0909%" height="15" fill="rgb(225,78,52)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1055.50">bevy_ecs::sch..</text></g><g><title>bevy_tasks::task_pool::Scope&lt;T&gt;::spawn (1 samples, 9.09%)</title><rect x="90.9091%" y="1029" width="9.0909%" height="15" fill="rgb(241,88,44)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1039.50">bevy_tasks::t..</text></g><g><title>async_executor::Executor::spawn (1 samples, 9.09%)</title><rect x="90.9091%" y="1013" width="9.0909%" height="15" fill="rgb(252,186,28)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1023.50">async_executo..</text></g><g><title>async_executor::Executor::spawn_inner (1 samples, 9.09%)</title><rect x="90.9091%" y="997" width="9.0909%" height="15" fill="rgb(212,167,37)" fg:x="10" fg:w="1"/><text x="91.1591%" y="1007.50">async_executo..</text></g><g><title>async_task::runnable::Runnable&lt;M&gt;::schedule (1 samples, 9.09%)</title><rect x="90.9091%" y="981" width="9.0909%" height="15" fill="rgb(252,198,9)" fg:x="10" fg:w="1"/><text x="91.1591%" y="991.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S,M&gt;::schedule (1 samples, 9.09%)</title><rect x="90.9091%" y="965" width="9.0909%" height="15" fill="rgb(254,18,42)" fg:x="10" fg:w="1"/><text x="91.1591%" y="975.50">async_task::r..</text></g><g><title>alloc::task::raw_waker::wake (1 samples, 9.09%)</title><rect x="90.9091%" y="949" width="9.0909%" height="15" fill="rgb(221,51,23)" fg:x="10" fg:w="1"/><text x="91.1591%" y="959.50">alloc::task::..</text></g><g><title>&lt;parking::Inner as alloc::task::Wake&gt;::wake (1 samples, 9.09%)</title><rect x="90.9091%" y="933" width="9.0909%" height="15" fill="rgb(240,151,16)" fg:x="10" fg:w="1"/><text x="91.1591%" y="943.50">&lt;parking::Inn..</text></g></svg></svg>