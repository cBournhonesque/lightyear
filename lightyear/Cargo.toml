[package]
name = "lightyear"
version = "0.21.0-rc.1"
authors.workspace = true
rust-version.workspace = true
edition.workspace = true
description = "Server-client networking library for the Bevy game engine with modular architecture"
readme = "../README.md"
repository = "https://github.com/cBournhonesque/lightyear"
keywords = ["bevy", "multiplayer", "networking", "netcode", "gamedev"]
categories = ["game-development", "network-programming"]
license.workspace = true
exclude = ["/tests"]
publish = true

[features]
default = [
  "std",
  "client",
  "server",
  "replication",
  "prediction",
  "interpolation",
]
std = [
  "bevy/std",
  # needed for bevy_transform parallel
  "bevy/async_executor",
  "lightyear_interpolation?/std",
  "lightyear_udp?/std",
  "lightyear_netcode?/std",
  "lightyear_prediction?/std",
]
client = [
  "lightyear_connection/client",
  "lightyear_netcode?/client",
  "lightyear_sync/client",
  "lightyear_replication?/client",
  "lightyear_inputs?/client",
  "lightyear_inputs_leafwing?/client",
  "lightyear_inputs_native?/client",
  "lightyear_webtransport?/client"
]
server = [
  "lightyear_connection/server",
  "lightyear_netcode?/server",
  "lightyear_sync/server",
  "lightyear_replication?/server",
  "lightyear_inputs?/server",
  "lightyear_inputs_leafwing?/server",
  "lightyear_inputs_native?/server",
  "lightyear_udp?/server",
  "lightyear_webtransport?/server",
  "lightyear_prediction?/server"
]
replication = [
  "dep:lightyear_replication"
]
prediction = [
  "dep:lightyear_prediction",
  "dep:lightyear_replication",
  "lightyear_replication?/prediction",
]
interpolation = [
  "dep:lightyear_interpolation",
  "dep:lightyear_replication",
  "lightyear_replication?/interpolation",
  "lightyear_inputs?/interpolation",
]
trace = []
metrics = [
  "lightyear_interpolation?/metrics",
  "lightyear_replication?/metrics",
  "lightyear_sync/metrics",
  "lightyear_transport/metrics",
  "lightyear_prediction?/metrics",
  "lightyear_inputs?/metrics",
  "lightyear_netcode?/metrics"
]
netcode = [
  "dep:lightyear_netcode",
]
webtransport = [
  "std",
  "dep:lightyear_webtransport"
]
webtransport_self_signed = [
  "lightyear_webtransport/self-signed"
]
webtransport_dangerous_configuration = [
  "lightyear_webtransport/dangerous-configuration"
]
input_native = [
  "dep:lightyear_inputs",
  "dep:lightyear_inputs_native",
]
leafwing = [
  "dep:lightyear_inputs",
  "dep:lightyear_inputs_leafwing",
]

# NOTE: because lightyear doesn't enable any features of avian by default, your crate must
#       enable essential features (like f32 or f64).
avian = [
  "dep:lightyear_avian"
]
avian2d = ["lightyear_avian/2d", "avian"]
avian3d = ["lightyear_avian/3d", "avian"]

# IO LAYERS
udp = [
  "dep:lightyear_udp",
  "std",
]
websocket = [
  "std",
]
crossbeam = [
  "dep:lightyear_crossbeam",
]

# CONNECTION LAYERS
steam = [
  "dep:steamworks",
  "std",
]
# TODO: add netcode

#lag_compensation = [
#  "lightyear_avian?/lag_compensation",
#]
track_location = ["bevy/track_location"]

[dependencies]
# local crates
lightyear_avian = { workspace = true, optional = true }
lightyear_macros.workspace = true
lightyear_connection.workspace = true
lightyear_core.workspace = true
lightyear_frame_interpolation = { workspace = true, optional = true }
lightyear_link.workspace = true
lightyear_netcode = {workspace = true, optional = true}
lightyear_interpolation = {workspace = true, optional = true}
lightyear_prediction = {workspace = true, optional = true}
lightyear_messages.workspace = true
lightyear_replication = {workspace = true, optional = true}
lightyear_sync.workspace = true
lightyear_transport.workspace = true
lightyear_serde.workspace = true
lightyear_utils.workspace = true
lightyear_inputs = {workspace = true, optional = true}
lightyear_inputs_leafwing = {workspace = true, optional = true}
lightyear_inputs_native = {workspace = true, optional = true}
lightyear_crossbeam = {workspace = true, optional = true}
lightyear_webtransport = {workspace = true, optional = true}

# bevy
bevy.workspace = true

# io
aeronet_io.workspace = true

# utils
thiserror.workspace = true
serde.workspace = true


[target."cfg(not(target_family = \"wasm\"))".dependencies]
lightyear_udp = { workspace = true, optional = true }
steamworks = { workspace = true, optional = true }

[target."cfg(target_family = \"wasm\")".dependencies]
console_error_panic_hook.workspace = true
bevy_web_keepalive.workspace = true
wasm-bindgen = { workspace = true, optional = true }


[dev-dependencies]
leafwing-input-manager.workspace = true

# docs.rs-specific configuration
[package.metadata.docs.rs]
# we cannot use all-features = true, because we need to provide additional features for avian
# when building the docs
# NOTE: building docs.rs doesn't work if I include avian
features = ["metrics", "udp", "webtransport", "leafwing", "websocket", "steam", "crossbeam", "lag_compensation"]
rustdoc-args = ["--cfg", "docsrs"]
